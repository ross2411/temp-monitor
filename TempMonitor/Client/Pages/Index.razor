@page "/"
@using TempMonitor.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using System.Reflection
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Garden Office Temperatures</h1>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p><em>@errorMessage</em></p>
}
@if (temperatures == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
    Client AssemblyVersion:@ClientAssemblyVersion
    Server AssemblyVersion:@ServerAssemblyVersion
    </div>
<div class="row">
    <label>Latest reading at: @currentTemperature.dateTime.ToString("dd/MM/yy HH:mm:ss")</label>
</div>
    <div class="row">

        <div class="col-md">
<label>Inside</label>
            <RadzenRadialGauge Style="width: 100%; height: 300px;">
                <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="5" Min="0" Max="35" TickPosition=@tickPosition>
                    <RadzenRadialGaugeScalePointer Value=@currentTemperature.InsideTemp Length="0.6" ShowValue=@showValue>
                        <Template Context="pointer">
                            <h4>
                                @pointer.Value <sup>C</sup>
                            </h4>
                        </Template>
                    </RadzenRadialGaugeScalePointer>
                    <RadzenRadialGaugeScaleRange From="15" To="25" Fill="green" />
                    <RadzenRadialGaugeScaleRange From="7.5" To="15" Fill="orange" />
                    <RadzenRadialGaugeScaleRange From="0" To="7.5" Fill="blue" />
                    <RadzenRadialGaugeScaleRange From="25" To="35" Fill="red" />
                </RadzenRadialGaugeScale>
            </RadzenRadialGauge>
        </div>
        <div class="col-md">
            <label>Outside</label>
            <RadzenRadialGauge Style="width: 100%; height: 300px;">
                <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="5" Min="0" Max="35" TickPosition=@tickPosition>
                    <RadzenRadialGaugeScalePointer Value=@(currentTemperature.OutsideTemp ?? 0) Length="0.6" ShowValue=@showValue>
                        <Template Context="pointer">
                            <h4>
                                @pointer.Value <sup>C</sup>
                            </h4>
                        </Template>
                    </RadzenRadialGaugeScalePointer>
                    <RadzenRadialGaugeScaleRange From="15" To="25" Fill="green"/>
                    <RadzenRadialGaugeScaleRange From="7.5" To="15" Fill="orange"/>
                    <RadzenRadialGaugeScaleRange From="0" To="7.5" Fill="blue"/>
                    <RadzenRadialGaugeScaleRange From="25" To="35" Fill="red"/>
                </RadzenRadialGaugeScale>
            </RadzenRadialGauge>
        </div>
    </div>
    <RadzenDropDown AllowClear="true" TValue="string"
                    Data="@periods"
                    TextProperty="Name"
                    ValueProperty="Value"
                    Style="margin-bottom: 20px"
                    @bind-Value="@currentPeriod"
                    Change="@(args => Change(args, "DropDown"))" />
    <br />
    <RadzenButton Click="(args)=> RefreshPage()">Refresh</RadzenButton>
    <label>Smooth <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox></label>

    <RadzenChart>
        <RadzenLineSeries Smooth="@smooth" Data="@temperatures" CategoryProperty="dateTime" Title="Inside Temp" ValueProperty="InsideTemp">
        </RadzenLineSeries>
        <RadzenLineSeries Smooth="@smooth" Data="@temperatures" CategoryProperty="Date" Title="Outside Temp" ValueProperty="OutsideTemp">
        </RadzenLineSeries>
        <RadzenCategoryAxis Padding="20" FormatString="{0:HH:MM}">
            <RadzenAxisTitle Text="Time"></RadzenAxisTitle>
        </RadzenCategoryAxis>
        <RadzenValueAxis Formatter="@FormatAsDegreesC">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Temperature" />
        </RadzenValueAxis>
    </RadzenChart>
}



@code {
    private HubConnection hubConnection;
    private string ClientAssemblyVersion;
    private string ServerAssemblyVersion;
    bool showValue = true;
    GaugeTickPosition tickPosition = GaugeTickPosition.Inside;
    private List<Temperature> temperatures;
    private string currentPeriod;
    private List<Period> periods = new List<Period>
{
                new Period
                {
                    Name = "Today",
                    Value = "1"
                },
                 new Period
                {
                    Name = "Last 2 days",
                    Value = "2"
                },
                  new Period
                {
                    Name = "Last 3 days",
                    Value = "3"
                },
                   new Period
                {
                    Name = "Last Week",
                    Value = "7"
                },
                    new Period
                {
                    Name = "Last Month",
                    Value = "30"
                }
            };

    private bool smooth = true;
    private Temperature currentTemperature;
    private string errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        ClientAssemblyVersion = Assembly.GetExecutingAssembly().GetName().Version.ToString();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/temperaturehub"))
            .Build();
        
        hubConnection.On<Temperature>
            ("LatestTempReceived", (temperature) =>
            {
                currentTemperature = temperature;
                // if (temperature.dateTime.Date == temperatures.Last().dateTime.Date) //TODO This should check for midnight cross over
                temperatures.Add(temperature);
                StateHasChanged();
            });
        
        //TODO Swap out for SignalR
        var periodDays = 3;
        currentPeriod = periodDays.ToString(); // periods.First(m => m.Value == $"{periodDays}");
        using var temperatureHttpResponse = await Http.GetAsync($"temperature/GetTemps?period={periodDays}");

        if (!temperatureHttpResponse.IsSuccessStatusCode)
        {
            // set error message for display, log to console and return
            errorMessage = temperatureHttpResponse.ReasonPhrase;
            Console.WriteLine($"There was an error retrieving Temps! {errorMessage}");
            temperatures = new List<Temperature> { new Temperature {
            dateTime = new DateTime(2020,01,01),
            Humidity =1,
            InsideTemp = 1,
            OutsideTemp = 1,
            WeatherDescription = "n/a"
                    }
            };
        }
        else
        {
            temperatures = (await temperatureHttpResponse.Content.ReadFromJsonAsync<List<Temperature>>());
        }

        using var currentTemperatureHttpResponse = await Http.GetAsync("temperature/GetCurrentTemp");
        if (!currentTemperatureHttpResponse.IsSuccessStatusCode)
        {
            // set error message for display, log to console and return
            errorMessage = currentTemperatureHttpResponse.ReasonPhrase;
            Console.WriteLine($"There was an error retrieving Current Temp! {errorMessage}");
            currentTemperature = new Temperature
            {
                dateTime = new DateTime(2020, 01, 01),
                Humidity = 1,
                InsideTemp = 1,
                OutsideTemp = 1,
                WeatherDescription = "n/a"
            };
        }
        else
        {
            currentTemperature = (await currentTemperatureHttpResponse.Content.ReadFromJsonAsync<Temperature>());
        }

        var versionInfoResponse = await Http.GetAsync("VersionInfo");
        if (versionInfoResponse.IsSuccessStatusCode)
        {
            var versionInfo = await versionInfoResponse.Content.ReadFromJsonAsync<VersionInfo>();
            ServerAssemblyVersion = versionInfo.AssemblyVersion;

        }
        //currentTemperature = (await Http.GetFromJsonAsync<Temperature>($"temperature/GetCurrentTemp"));
        await hubConnection.StartAsync();

    }

    string FormatAsDegreesC(object value)
    {
        return string.Format("{0}°C", value);
    }
    async Task Change(object value, string name)
    {
        if (value == null)
            value = 1;
        currentPeriod = value.ToString();
        temperatures = await Http.GetFromJsonAsync<List<Temperature>>($"temperature/GetTemps?period={value.ToString()}");
        StateHasChanged();
    }

    public void RefreshPage()
    {
        NavigationManager.NavigateTo("refresh");
    }


}
